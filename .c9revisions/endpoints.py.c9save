{"ts":1373152609902,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"import logging, json, datetime, appengine_config, webapp2, uuid\nfrom google.appengine.api import taskqueue, memcache, search\n\nimport GlobalUtilities as tools\nimport DataModels as models\nimport spreadsheet_pipelines\n\n# Cloud Endpoints\nfrom google.appengine.ext import endpoints\nfrom protorpc import remote\nfrom endpoints_messages import *\n\n## Cloud Endpoints Cookies - monkey patch\nfrom google.appengine.ext.endpoints import api_config\n\nclass PatchedApiConfigGenerator(api_config.ApiConfigGenerator):\n  def pretty_print_config_to_json(self, services, hostname=None):\n    logging.warn('TODO: remove this monkey patch after GAE version 1.7.7')\n    # Sorry, the next line is not PEP8 compatible :(\n    json_string = super(PatchedApiConfigGenerator, self).pretty_print_config_to_json(\n        services, hostname=hostname)\n    to_patch = json.loads(json_string)\n    to_patch['auth'] = {'allowCookieAuth': True}\n    return json.dumps(to_patch, sort_keys=True, indent=2)\n \n \napi_config.ApiConfigGenerator = PatchedApiConfigGenerator\n\n## End monkey patch\n\nendpoints_client_id = \"AIzaSyB7k0LsUXibTJHkCx_D3MA0HT6tQAtYZAo\"\nendpoints_description = \"GHI Donations API\"\nendpoints_clients = [endpoints_client_id, endpoints.API_EXPLORER_CLIENT_ID]\n\n@endpoints.api(name='ghidonations', version='v1',\n               description=endpoints_description,\n               allowed_client_ids=endpoints_clients)\nclass EndpointsAPI(remote.Service):\n\n#### ---- Globalhopeindia.org Utility Functions ---- ####\n\n    # public.all_teams\n    @endpoints.method(AllTeams_In, AllTeams_Out, path='public/all_teams',\n                    http_method='GET', name='public.all_teams')\n    def public_all_teams(self, req):\n        s = tools.getKey(req.settings_key).get()\n\n        all_teams = []\n        for t in s.data.display_teams:\n            team = Team_Data(name=t.name, key=t.key.urlsafe())          \n            all_teams.append(team)\n        \n        return AllTeams_Out(objects=all_teams)\n\n    # public.individual_info\n    @endpoints.method(IndividualInfo_In, IndividualInfo_Out, path='public/individual_info',\n                    http_method='GET', name='public.individual_info')\n    def public_individual_info(self, req):\n        i = tools.getKey(req.individual_key).get()\n        t_key = tools.getKey(req.team_key)\n        info = i.data.info(t_key)\n\n        return IndividualInfo_Out(image_url=info[0], name=info[1], description=info[2], \n                                percentage=info[3], message=info[4])\n\n    # public.team_info\n    @endpoints.method(TeamInfo_In, TeamInfo_Out, path='public/team_info',\n                    http_method='GET', name='public.team_info')\n    def public_team_info(self, req):\n        t = tools.getKey(req.team_key).get()\n        \n        info_list = []\n        m_list = t.data.members_list\n        for m in m_list:\n            info = TeamInfo_Data(name=m[0], photo_url=m[1], tl_key=m[2])\n            info_list.append(info)\n\n        return TeamInfo_Out(info_list=info_list)\n\n#### ---- Data Access ---- ####\n    # get.contacts\n    @endpoints.method(Query_In, Contacts_Out, path='get/contacts',\n                    http_method='GET', name='get.contacts')\n    def get_contacts(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        if req.query == None:\n            req.query = \"\"\n\n        results = s.search.contact(req.query, query_cursor=req.query_cursor)\n        logging.info(\"Getting contacts with query: \" + req.query)\n\n        contacts = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for c in results[0]:\n            f = c.fields\n            contact = Contact_Data(key=f[0].value, name=f[1].value, email=tools.truncateEmail(f[2].value))\n            contacts.append(contact)\n\n        return Contacts_Out(objects=contacts, new_cursor=new_cursor)\n\n    # get.contact_donations\n    @endpoints.method(GetContactDonations_In, Donations_Out, path='get/contact_donations',\n                    http_method='GET', name='get.contact_donations')\n    def get_contact_donations(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n        query = \"contact_key:\" + str(req.contact_key)\n\n        results = s.search.donation(query, query_cursor=req.query_cursor)\n        logging.info(\"Getting contact donations with query: \" + query)\n\n        donations = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for d in results[0]:\n            f = d.fields\n\n            donation = Donation_Data(key=f[0].value, formatted_donation_date=f[9].value, name=f[2].value, email=tools.truncateEmail(f[3].value),\n                 payment_type=f[5].value, amount_donated=tools.moneyAmount(f[4].value))\n\n            donations.append(donation)\n\n        return Donations_Out(objects=donations, new_cursor=new_cursor)\n\n    # get.deposits\n    @endpoints.method(Query_In, Deposits_Out, path='get/deposits',\n                    http_method='GET', name='get.deposits')\n    def get_deposits(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        if req.query == None:\n            req.query = \"\"\n\n        results = s.search.deposit(req.query, query_cursor=req.query_cursor)\n        logging.info(\"Getting deposits with query: \" + req.query)\n\n        deposits = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for de in results[0]:\n            f = de.fields\n\n            deposit = Deposit_Data(key=f[0].value, time_deposited=f[1].value)\n            deposits.append(deposit)\n\n        return Deposits_Out(objects=deposits, new_cursor=new_cursor)\n\n    # get.donations\n    @endpoints.method(Query_In, Donations_Out, path='get/donations',\n                    http_method='GET', name='get.donations')\n    def get_donations(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n        query = req.query\n\n        if query == None:\n            query = \"\"\n\n        results = s.search.donation(query, query_cursor=req.query_cursor)\n        logging.info(\"Getting donations with query: \" + query)\n\n        donations = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for d in results[0]:\n            f = d.fields\n\n            donation = Donation_Data(key=f[0].value, formatted_donation_date=f[9].value, name=f[2].value, email=tools.truncateEmail(f[3].value),\n                 payment_type=f[5].value, amount_donated=tools.moneyAmount(f[4].value))\n\n            donations.append(donation)\n\n        return Donations_Out(objects=donations, new_cursor=new_cursor)\n\n    # get.individuals\n    @endpoints.method(Query_In, Individuals_Out, path='get/individuals',\n                    http_method='GET', name='get.individuals')\n    def get_individuals(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        if req.query == None:\n            req.query = \"\"\n        \n        results = s.search.individual(req.query, query_cursor=req.query_cursor)\n        logging.info(\"Getting individuals with query: \" + req.query)\n\n        individuals = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for i in results[0]:\n            f = i.fields\n\n            individual = Individual_Data(key=f[0].value, name=f[1].value, email=f[2].value, raised=tools.moneyAmount(f[4].value))\n            individuals.append(individual)\n\n        return Individuals_Out(objects=individuals, new_cursor=new_cursor)\n\n    # get.monthly_chart_data\n    @endpoints.method(NoRequestParams, JSON_Out, path='get/monthly_chart_data',\n                    http_method='GET', name='get.monthly_chart_data')\n    def monthly_chart_data(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        json_data = s.one_month_history\n\n        return JSON_Out(json_data=json_data)\n\n    # mailchimp.lists\n    @endpoints.method(MailchimpLists_In, MailchimpLists_Out, path='mailchimp/lists',\n                    http_method='GET', name='mailchimp.lists')\n    def mailchimp_lists(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        response = tools.getMailchimpLists(self, req.mc_apikey)\n        mc_lists = None\n        error_message = None\n\n        if response[0] == True:\n            mc_lists = json.dumps(response[1])\n        else:\n            mc_lists = None\n            error_message = response[1]\n\n        return MailchimpLists_Out(success=response[0], mc_lists=mc_lists, error_message=error_message)\n\n    # get.teams\n    @endpoints.method(Query_In, Teams_Out, path='get/teams',\n                    http_method='GET', name='get.teams')\n    def get_teams(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        if req.query == None:\n            req.query = \"\"\n\n        results = s.search.team(req.query, query_cursor=req.query_cursor)\n        logging.info(\"Getting teams with query: \" + req.query)\n\n        teams = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for t in results[0]:\n            f = t.fields\n            \n            team = Team_Data(key=f[0].value, name=f[1].value, donation_total=tools.moneyAmount(f[2].value))\n            teams.append(team)\n\n        return Teams_Out(objects=teams, new_cursor=new_cursor)\n\n    # get.team_donation_total\n    @endpoints.method(TeamKey_In, GetTeamDonationTotal_Out, path='get/team_donation_total',\n                    http_method='GET', name='get.team_donation_total')\n    def get_team_donation_total(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        t = tools.getKey(req.team_key).get()\n        donation_total = tools.moneyAmount(t.data.donation_total)\n\n        return GetTeamDonationTotal_Out(donation_total=donation_total)\n\n    # get.team_members\n    @endpoints.method(GetTeamMembers_In, Individuals_Out, path='get/team_members',\n                    http_method='GET', name='get.team_members')\n    def get_team_members(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n        query = \"team_key:\" + str(req.team_key)\n\n        results = s.search.individual(query, query_cursor=req.query_cursor)\n        logging.info(\"Getting team members with query: \" + query)\n\n        individuals = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for i in results[0]:\n            f = i.fields\n\n            individual = Individual_Data(key=f[0].value, name=f[1].value, email=f[2].value, raised=tools.moneyAmount(f[4].value))\n            individuals.append(individual)\n\n        return Individuals_Out(objects=individuals, new_cursor=new_cursor)\n\n    # get.team_totals\n    @endpoints.method(IndividualKey_In, GetTeamTotals_Out, path='get/team_totals',\n                    http_method='GET', name='get.team_totals')\n    def get_team_totals(self, req):\n        s = tools.getSettingsKey(self, endpoints=True).get()\n        \n        i = tools.getKey(req.individual_key).get()\n\n        team_totals = []\n        for tl in i.teamlist_entities:\n            total = GetTeamTotals_Data(team_name=tl.team_name, donation_total=tools.moneyAmount(tl.data.donation_total))\n            team_totals.append(total)\n\n        return GetTeamTotals_Out(team_totals=team_totals)\n\n    # get.individual_donations\n    @endpoints.method(GetIndividualDonations_In, Donations_Out, path='semi/get/individual_donations',\n                    http_method='GET', name='semi.get.individual_donations')\n    def semi_get_individual_donations(self, req):\n        isAdmin, s = tools.checkAuthentication(self, False, from_endpoints=True)\n        query = \"individual_key:\" + str(req.individual_key)\n\n        results = s.search.donation(query, query_cursor=req.query_cursor)\n        logging.info(\"Getting individual donations with query: \" + query)\n\n        donations = []\n        new_cursor = tools.getWebsafeCursor(results[1])\n\n        for d in results[0]:\n            f = d.fields\n\n            donation = Donation_Data(key=f[0].value, formatted_donation_date=f[9].value, name=f[2].value, email=tools.truncateEmail(f[3].value),\n                 payment_type=f[5].value, amount_donated=tools.moneyAmount(f[4].value), team_name=f[6].value)\n\n            donations.append(donation)\n\n        return Donations_Out(objects=donations, new_cursor=new_cursor)\n\n    # semi.get.team_members\n    @endpoints.method(SemiGetTeamMembers_In, SemiGetTeamMembers_Out, path='semi/get/team_members',\n                    http_method='GET', name='semi.get.team_members')\n    def semi_get_team_members(self, req):\n    # Returns team information\n        isAdmin, s = tools.checkAuthentication(self, False, from_endpoints=True)\n\n        t = tools.getKey(req.team_key).get()\n        members_list = t.data.members_list\n\n        members = []\n        for m in members_list:\n            member = SemiGetTeamMembers_Data(key=m[2], name=m[0])\n            members.append(member)\n\n        return SemiGetTeamMembers_Out(objects=members)\n\n#### ---- Data creation/updating ---- ####\n    # donation.mark_unreviewed\n    @endpoints.method(DonationKey_In, SuccessMessage_Out, path='donation/mark_unreviewed',\n                    http_method='POST', name='donation.mark_unreviewed')\n    def donation_mark_unreviewed(self, req):\n        message = \"Donation marked as unreviewed\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        d = tools.getKey(req.donation_key).get()\n        d.review.markUnreviewed()\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # new.contact\n    @endpoints.method(NewContact_In, SuccessMessage_Out, path='new/contact',\n                    http_method='POST', name='new.contact')\n    def new_contact(self, req):\n        message = \"<b>\" + req.name + \"</b> created\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n        contact_exists = s.exists.contact(email=req.email)\n\n        address = [req.address.street, req.address.city, req.address.state, req.address.zipcode]\n\n        if contact_exists[0] == False:\n            s.create.contact(req.name, req.email, req.phone, address, req.notes, True)\n\n        else:\n            #If this email address already exists for a user\n            message = \"Whoops! You entered an email address already in use by another contact.\"\n            success = False\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # new.impression\n    @endpoints.method(NewImpression_In, SuccessMessage_Out, path='new/impression',\n                    http_method='POST', name='new.impression')\n    def new_impression(self, req):\n        message = \"Impression saved\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        c = tools.getKey(req.contact_key).get()\n        c.create.impression(req.impression, req.notes)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # new.individual\n    @endpoints.method(NewIndividual_In, SuccessMessage_Out, path='new/individual',\n                    http_method='POST', name='new.individual')\n    def new_individual(self, req):\n        message = \"<b>\" + req.name + \"</b> created\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n        exists = s.exists.individual(req.email)\n\n        email, team_key = req.email, req.team_key\n\n        if exists[0] == False:\n            if email == \"\":\n                email = None\n\n            if team_key == \"team\":\n                team_key = None\n\n            s.create.individual(req.name, tools.getKey(team_key), email, req.password, req.admin)\n\n        else:\n            #If this email address already exists for a user\n            message = \"Sorry, but this email address is already being used.\"\n            success = False\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # new.team\n    @endpoints.method(NewTeam_In, SuccessMessage_Out, path='new/team',\n                    http_method='POST', name='new.team')\n    def new_team(self, req):\n        message = \"<b>\" + req.name + \"</b> created\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n        s.create.team(req.name)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # new.offline_donation\n    @endpoints.method(NewOfflineDonation_In, SuccessMessage_Out, path='new/offline_donation',\n                    http_method='POST', name='new.offline_donation')\n    def new_offline_donation(self, req):\n        message = \"Offline donation created\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        # Make req variables local\n        name, email, amount_donated, notes, address, team_key, individual_key, \\\n            add_deposit = req.name, req.email, tools.toDecimal(req.amount_donated), req.notes, \\\n            req.address, req.team_key, req.individual_key, req.add_deposit\n\n        if address:\n            address = [address.street, address.city, address.state, address.zipcode]\n\n        if team_key:\n            team_key = tools.getKey(team_key)\n\n        if individual_key:\n            individual_key = tools.getKey(individual_key)            \n\n        s.create.donation(name, email, amount_donated, amount_donated, address, team_key, \n                            individual_key, add_deposit, \"\", notes, \"offline\", False, None)\n\n        return SuccessMessage_Out(success=success, message=message)\n    \n    # update.donation\n    @endpoints.method(UpdateDonation_In, SuccessMessage_Out, path='update/donation',\n                    http_method='POST', name='update.donation')\n    def update_donation(self, req):\n        message = \"Donation has been saved\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        d = tools.getKey(req.donation_key).get()\n\n        # Make req variables local\n        team_key, individual_key = req.team_key, req.individual_key\n\n        if team_key:\n            if team_key == \"general\":\n                team_key = None\n            else:\n                team_key = tools.getKey(team_key)\n\n        if individual_key:\n            individual_key = tools.getKey(individual_key)\n\n        d.update(req.notes, team_key, individual_key, req.add_deposit, req.donation_date)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # update.contact\n    @endpoints.method(UpdateContact_In, SuccessMessage_Out, path='update/contact',\n                    http_method='POST', name='update.contact')\n    def update_contact(self, req):\n        message = \"Contact has been saved\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        c = tools.getKey(req.contact_key).get()\n\n        a = req.address\n        address = [a.street, a.city, a.state, a.zipcode]\n\n        # Check to see if a new email was added and see if it already exists\n        list_diff = tools.listDiff(c.email, req.email)\n\n        if list_diff:\n            email_exists = s.exists.contact(email=list_diff)[0]\n        else:\n            email_exists = False\n\n        if email_exists == True:\n            success = False\n            message = \"Whoops! You entered an email address already in use by another contact.\"\n        else:\n            c.update(req.name, req.email, req.phone, req.notes, address)\n        \n        return SuccessMessage_Out(success=success, message=message)\n\n    # update.settings\n    @endpoints.method(UpdateSettings_In, SuccessMessage_Out, path='update/settings',\n                    http_method='POST', name='update.settings')\n    def update_settings(self, req):\n        message = \"Settings have been updated\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        s.update(req.name, req.email, req.mc_use, req.mc_apikey, req.mc_donorlist, \n            req.paypal_id, req.impressions, req.amount1, req.amount2, req.amount3, \n            req.amount4, req.use_custom, req.confirmation_header, req.confirmation_info, \n            req.confirmation_footer, req.confirmation_text, req.donor_report_text)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # update.team\n    @endpoints.method(UpdateTeam_In, SuccessMessage_Out, path='update/team',\n                    http_method='POST', name='update.team')\n    def update_team(self, req):\n        message = \"Team has been updated\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        t = tools.getKey(req.team_key).get()\n        t.update(req.name, req.show_team)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n#### ---- Contact merge ---- ####\n    # merge.contacts\n    @endpoints.method(MergeContacts_In, SuccessMessage_Out, path='merge/contacts',\n                    http_method='POST', name='merge.contacts')\n    def merge_contacts(self, req):\n        message = \"Contacts merged\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        c1 = tools.getKey(req.contact1)\n        c2 = tools.getKey(req.contact2)\n\n        tools.mergeContacts(c1, c2)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n#### ---- Search ---- ####\n    # get.contacts_json\n    @endpoints.method(NoRequestParams, JSON_Out, path='get/contacts_json',\n                    http_method='GET', name='get.contacts_json')\n    def get_contacts_json(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        return JSON_Out(json_data=s.data.contactsJSON)\n\n#### ---- Donation depositing ---- ####\n    # deposits.add\n    @endpoints.method(Deposits_In, SuccessMessage_Out, path='deposits/add',\n                    http_method='POST', name='deposits.add')\n    def deposits_add(self, req):\n        message = \"Donations deposited.\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        if req.donation_keys != []:\n            s.deposits.deposit(req.donation_keys)\n\n        else:\n            message = \"No donations to deposit.\"\n            success = False\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # deposits.remove\n    @endpoints.method(Deposits_In, SuccessMessage_Out, path='deposits/remove',\n                    http_method='POST', name='deposits.remove')\n    def deposits_remove(self, req):\n        message = \"Donations removed from deposits.\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        if req.donation_keys != []:\n            s.deposits.remove(req.donation_keys)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n#### ---- Confirmation Letters ---- ####\n\n    # confirmation.email\n    @endpoints.method(DonationKey_In, SuccessMessage_Out, path='confirmation/email',\n                    http_method='POST', name='confirmation.email')\n    def confirmation_email(self, req):\n        message = \"Email sent\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        d = tools.getKey(req.donation_key).get()\n\n        #Email receipt to donor\n        d.review.archive()\n        d.confirmation.task(60)\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # confirmation.print\n    @endpoints.method(DonationKey_In, ConfirmationPrint_Out, path='confirmation/print',\n                    http_method='POST', name='confirmation.print')\n    def printReceipt(self, req):\n        message = \"Receipt open for printing\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n        d = tools.getKey(req.donation_key).get()\n\n        #Print receipt to donor\n        d.review.archive()\n        print_url = d.confirmation.print_url(None)\n\n        return ConfirmationPrint_Out(success=success, message=message, print_url=print_url)\n\n    # confirmation.annual_report\n    @endpoints.method(ConfirmationAnnualReport_In, SuccessMessage_Out, path='confirmation/annual_report',\n                    http_method='POST', name='confirmation.annual_report')\n    def confirmation_annual_report(self, req):\n        message = \"Annual report sent\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        taskqueue.add(queue_name=\"annualreport\", url=\"/tasks/annualreport\", params={'contact_key' : req.contact_key, 'year' : req.year})\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # donation.archive\n    @endpoints.method(DonationKey_In, SuccessMessage_Out, path='donation/archive',\n                    http_method='POST', name='donation.archive')\n    def donation_archive(self, req):\n        message = \"Donation archived\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        d = tools.getKey(req.donation_key).get()\n        d.review.archive()\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # donation.delete\n    @endpoints.method(DonationKey_In, SuccessMessage_Out, path='donation/delete',\n                    http_method='POST', name='donation.delete')\n    def donation_delete(self, req):\n        message = \"Donation deleted\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        tools.getKey(req.donation_key).delete()\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # contact.delete\n    @endpoints.method(ContactKey_In, SuccessMessage_Out, path='contact/delete',\n                    http_method='POST', name='contact.delete')\n    def contact_delete(self, req):\n        message = \"Contact deleted\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        tools.getKey(req.contact_key).delete()\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # team.delete\n    @endpoints.method(TeamKey_In, SuccessMessage_Out, path='team/delete',\n                    http_method='POST', name='team.delete')\n    def deleteTeam(self, req):\n        message = \"Team deleted\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        tools.getKey(req.team_key).delete()\n\n        return SuccessMessage_Out(success=success, message=message)\n\n    # individual.delete\n    @endpoints.method(IndividualKey_In, SuccessMessage_Out, path='individual/delete',\n                    http_method='POST', name='individual.delete')\n    def individual_delete(self, req):\n        message = \"Individual deleted\"\n        success = True\n\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        user_key = tools.getUserKey(self)\n        isAdmin = user_key.get().admin\n\n        i_key = tools.getKey(req.individual_key)\n        \n        if isAdmin == True:\n            i_key.delete()\n        else:\n            if user_key == individual_key:\n                i_key.delete()\n            else:\n                #Access denied - non-admin trying to delete someone else\n                message = \"Failed - Access denied\"\n                success = False\n\n        return SuccessMessage_Out(success=success, message=message)\n\n#### ---- Spreadsheet Export Controllers ---- ####\n\n    # spreadsheet.start\n    @endpoints.method(SpreadsheetStart_In, SpreadsheetStart_Out, path='spreadsheet/start',\n                    http_method='POST', name='spreadsheet.start')\n    def spreadsheet_start(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        if req.mode not in [\"contacts\", \"donations\", \"individuals\"]: \n            raise endpoints.NotFoundException(\"Incorrect spreadsheet mode\")\n\n        # Create unique identifier for this job\n        job_id = str(uuid.uuid4())\n        memcache.set(job_id, 0)\n        \n        stage = spreadsheet_pipelines.GenerateReport(s.websafe, req.mode, job_id)\n        stage.start(queue_name='spreadsheet')\n\n        pipeline_id = stage.pipeline_id\n        memcache.set(\"id\" + job_id, pipeline_id)\n\n        return SpreadsheetStart_Out(job_id=job_id)\n\n    # spreadsheet.check\n    @endpoints.method(SpreadsheetCheck_In, SpreadsheetCheck_Out, path='spreadsheet/check',\n                    http_method='POST', name='spreadsheet.check')\n    def spreadsheet_check(self, req):\n        isAdmin, s = tools.checkAuthentication(self, True, from_endpoints=True)\n\n        completed, blob_key = tools.checkTaskCompletion(s, req.job_id)\n        status = tools.pipelineStatus(req.job_id)\n\n        return SpreadsheetCheck_Out(completed=completed, blob_key=blob_key, status=status)\n\napp = endpoints.api_server([EndpointsAPI], restricted=False)\napp = appengine_config.webapp_add_wsgi_middleware(app)\n"]],"start1":0,"start2":0,"length1":0,"length2":28964}]],"length":28964}
{"contributors":[],"silentsave":true,"ts":1373152654522,"patch":[[{"diffs":[[0,"ame="],[-1,"f[6].valu"],[1,"team_nam"],[0,"e)\n\n"]],"start1":12177,"start2":12177,"length1":17,"length2":16}]],"length":28963,"saved":false}
{"ts":1373152660172,"patch":[[{"diffs":[[0,"    f = d.fields"],[1,"\n            \n            team_name = f[6].value\n            "],[0,"\n\n            do"]],"start1":11920,"start2":11920,"length1":32,"length2":93}]],"length":29024,"saved":false}
{"ts":1373152661448,"patch":[[{"diffs":[[0,"lue\n            "],[1,"if "],[0,"\n\n            do"]],"start1":11981,"start2":11981,"length1":32,"length2":35}]],"length":29027,"saved":false}
{"ts":1373152662250,"patch":[[{"diffs":[[0,"     if "],[1,"team_"],[0,"\n\n      "]],"start1":11992,"start2":11992,"length1":16,"length2":21}]],"length":29032,"saved":false}
