{"ts":1373152525485,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"# App engine platform\nimport webapp2, appengine_config, logging, json, quopri, urllib\nfrom datetime import datetime\nfrom time import strftime\n\nfrom google.appengine.ext.webapp import template, blobstore_handlers\nfrom google.appengine.ext import blobstore\nfrom google.appengine.api import urlfetch\n\n# Sessions\nfrom gaesessions import get_current_session\n\n# Application files\nimport DataModels as models\nimport GlobalUtilities as tools\n\nclass BaseHandler(webapp2.RequestHandler):\n    def get(self):\n        #By default, need admin priveleges to view\n        isAdmin, s = tools.checkAuthentication(self, False)\n\n        if isAdmin == None and s == None:\n            self.redirect(\"/login\")\n        else:\n            return self.task(isAdmin, s)\n\n    def task(self, isAdmin, s):\n        self.response.out.write(\"BaseHandler default response out.\")\n\nclass BaseHandlerAdmin(webapp2.RequestHandler):\n    def get(self):\n        #By default, need admin priveleges to view\n        isAdmin, s = tools.checkAuthentication(self, True)\n\n        if isAdmin == None and s == None:\n            self.redirect(\"/login\")\n        else:\n            return self.task(isAdmin, s)\n\n    def task(self, isAdmin, s):\n        self.response.out.write(\"BaseHandlerAdmin default response out.\")\n\nclass AllContacts(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        search_query = self.request.get(\"search\")\n\n        template_variables = {\"search_query\" : search_query}\n        self.response.write(\n           template.render('pages/all_contacts.html', template_variables))\n\nclass AllDeposits(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        search_query = self.request.get(\"search\")\n\n        template_variables = {\"search_query\" : search_query}\n        self.response.write(\n                template.render('pages/all_deposits.html', template_variables))\n\nclass AllIndividuals(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        search_query = self.request.get(\"search\")\n\n        template_variables = {\"search_query\" : search_query}\n        self.response.write(\n           template.render('pages/all_individuals.html', template_variables))\n\nclass AllTeams(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        search_query = self.request.get(\"search\")\n\n        template_variables = {\"search_query\" : search_query}\n        self.response.write(\n                template.render('pages/all_teams.html', template_variables))\n\nclass Contact(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n        contact_key = self.request.get(\"c\")\n        c = tools.getKey(contact_key).get()\n\n        template_variables = {\"c\" : c, \"s\" : s}\n        self.response.write(\n           template.render('pages/contact.html', template_variables))\n\nclass Container(BaseHandler):\n    def task(self, isAdmin, s):\n        username = tools.getUsername(self)\n        logging.info(\"Loading container for: \" + str(username))\n\n        session = get_current_session()\n\n        redirect = False\n        mobile_redirect = \"none\"\n\n        user_agent = str(self.request.headers['User-Agent'])\n        mobile_devices = [\"android\", \"blackberry\", \"googlebot-mobile\", \"iemobile\", \"iphone\", \"ipod\", \"opera\", \"mobile\", \"palmos\", \"webos\"]\n        \n        # If user agent matches anything in the list above, redirect\n        for m in mobile_devices:\n            if user_agent.lower().find(m) != -1:\n                redirect = True\n\n        # If user has explicitly requested to be sent to desktop site\n        try:\n            if session[\"no-redirect\"] == \"1\":\n                redirect = False\n                mobile_redirect = \"block\"\n        except:\n            pass\n\n        if redirect == True:\n            self.redirect(\"/m\")\n\n        try:\n            template_variables = {\"settings\" : s.key.urlsafe(), \"username\" : username, \"mobile_redirect\" : mobile_redirect}\n        except:\n            self.redirect(\"/login\")\n\n        if isAdmin == True:\n            self.response.write(\n                template.render('pages/container.html', template_variables))\n\n        elif isAdmin == False:\n            self.response.write(\n                template.render('pages/container_ind.html', template_variables))\n        \nclass Dashboard(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        vals = s.data.one_week_history\n\n        past_donations = vals[0]\n        past_money = str(vals[1])\n\n        template_variables = {\"num_open_donations\" : s.data.num_open_donations, \"past_donations\" : past_donations, \"past_money\" : past_money}\n        self.response.write(\n            template.render('pages/dashboard.html', template_variables))\n\nclass Deposit(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        #WARNING - this is a really complicated and kind of a hacked-together\n        #solution. I didn't understand it the day after I wrote it.\n        # ... But it works. \n\n        deposit_key = self.request.get(\"d\")\n        deposit = tools.getKey(deposit_key).get()\n\n        entity_keys = deposit.entity_keys\n        total_amount = tools.toDecimal(0)\n        general_fund = tools.toDecimal(0)\n\n        donations = []\n        team_breakout = {}\n\n        for k in entity_keys:\n            d = k.get()\n            if d != None:\n                donations.append(d)\n\n                total_amount += d.amount_donated\n\n                if d.team:\n                    t = d.team.get()\n                    try:\n                        team_breakout[t.name]\n                    except:\n                        team_breakout[t.name] = [tools.toDecimal(0), []]\n\n                    team_breakout[t.name][0] += d.amount_donated\n\n                    if d.individual:\n                        i = d.individual.get()\n                        array = [i.name, d.amount_donated]\n\n                        team_breakout[t.name][1].append(array)\n                else:\n                    #Add count to general fund\n                    general_fund += d.amount_donated\n\n        team_breakout[\"General Fund\"] = [tools.toDecimal(general_fund), []]\n\n        new_team_breakout = {}\n        for k,v in team_breakout.items():\n            name = k\n            amount_donated = v[0]\n            array = v[1]\n            new_array = []\n\n            for a in array:\n                string = a[0] + \" ($\" + str(a[1]) + \")\"\n                new_array.append(string)\n\n            new_team_breakout[str(name) + \" ($\" + str(amount_donated) + \")\"] = new_array\n\n        template_variables = {\"d\" : deposit, \"donations\" : donations, \"team_breakout\" : new_team_breakout,\n                \"total_amount\" : total_amount}\n        self.response.write(\n                template.render('pages/deposit.html', template_variables))\n\nclass DonatePage(webapp2.RequestHandler):\n    def get(self):\n        self.response.headers['Access-Control-Allow-Origin'] = '*'\n        \n        settings = self.request.get(\"s\")\n\n        try:\n            s = tools.getKey(settings).get()\n\n            template_variables = {\"s\" : s}\n            self.response.write(\n                    template.render('pages/public_pages/pub_donate.html', template_variables))\n            \n        except:\n            self.response.write(\"Sorry, this URL triggered an error.  Please try again.\")\n\nclass DonorReport(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n        try:\n\n            contact_key = self.request.get(\"c\")\n            year = int(self.request.get(\"y\"))\n\n            if contact_key == \"\" or year == \"\" or len(str(year)) != 4:\n                #Throw an error if you don't have those two pieces of info or if the year isn't a number\n                raise Exception(\"Don't know contact key or year.\")\n\n            c = tools.getKey(contact_key).get()\n            s = c.settings.get()\n\n            donations = c.data.annual_donations(year)\n            donation_total = tools.toDecimal(0)\n\n            for d in donations:\n                donation_total += d.confirmation_amount\n\n            donation_total = \"${:,.2f}\".format(donation_total)\n\n            template_variables = {\"s\":s, \"c\":c, \"donations\":donations, \"year\":str(year), \"donation_total\":str(donation_total), \"street\":c.address[0], \"city\":c.address[1], \"state\":c.address[2], \"zip\":c.address[3]}\n\n            self.response.write(\n                   template.render(\"pages/letters/donor_report_print.html\", template_variables))\n\n        \n        except:\n            #If there's a malformed URL, give a 500 error\n            self.error(500)\n            self.response.write(\n                   template.render('pages/letters/thankyou_error.html', {}))\n\nclass DonorReportSelect(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        template_variables = {\"s\" : s}\n        self.response.write(\n           template.render('pages/donor_report_select.html', template_variables))\n\nclass ExportDonations(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        template_variables = {}\n        self.response.write(\n           template.render('pages/export_donations.html', template_variables))\n\nclass IndividualProfile(BaseHandler):\n    def task(self, isAdmin, s):\n        \n        if isAdmin == True:\n            #If an admin, they can get whatever user they want\n            i_key = self.request.get(\"i\")\n\n            #if no key specified, go to admin's personal account\n            if i_key == \"\":\n                i_key = tools.getUserKey(self)\n            else:\n                i_key = tools.getKey(i_key)\n\n        else:\n            #If a regular user, they can ONLY get their own profile\n            i_key = tools.getUserKey(self)\n        \n        i = i_key.get()\n        logging.info(\"Getting profile page for: \" + i.name)\n\n        #Creating a blobstore upload url\n        upload_url = blobstore.create_upload_url('/ajax/profile/upload')\n            \n        template_variables = {\"s\" : s, \"i\":i, \"upload_url\" : upload_url, \"isAdmin\" : isAdmin}\n        self.response.write(\n           template.render(\"pages/profile.html\", template_variables))\n\nclass IndividualWelcome(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n        try:\n            mode = self.request.get(\"m\")\n            individual_key = self.request.get(\"i\")\n\n            if mode == \"\" or individual_key == \"\":\n                #Throw an error if you don't have those two pieces of info\n                raise  Exception(\"Don't know mode or individual_key.\")\n\n            i = tools.getKey(individual_key).get()\n            s = tools.getKey(i.settings).get()\n\n            template_variables = {\"s\": s, \"i\" : i}\n            self.response.write(\n               template.render('pages/letters/individual.html', template_variables))\n        \n        except:\n            #If there's a malformed URL, give a 500 error\n            self.error(500)\n            self.response.write(\n                   template.render('pages/letters/thankyou_error.html', {}))\n\nclass Login(webapp2.RequestHandler):  \n    def get(self):\n        self.session = get_current_session()\n\n        #Flash message\n        message = tools.getFlash(self)\n\n        #Delete existing session if it exists\n        self.session.terminate()\n\n        template_variables = {\"flash\" : message}\n        self.response.write(\n            template.render('pages/login.html', template_variables))\n\n    def post(self):\n        self.session = get_current_session()\n\n        email = self.request.get(\"email\")\n        password = self.request.get(\"password\")\n\n        authenticated, user = tools.checkCredentials(self, email, password)\n\n        if authenticated == True:\n            logging.info(\"Authenticated: \" + str(authenticated) + \" and User: \" + str(user.name))\n            \n            #Log in\n            self.session[\"key\"] = str(user.key.urlsafe())\n            self.redirect(\"/\")\n\n        else:\n            #Invalid login\n            logging.info(\"Incorrect login.\")\n            tools.setFlash(self, \"Whoops, that didn't get you in. Try again.\")\n            self.redirect(\"/login\")\n\nclass Logout(webapp2.RequestHandler):\n    def get(self):\n        self.session = get_current_session()\n        self.session.terminate()\n\n        self.redirect(\"/login\")\n\nclass MergeContacts(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        template_variables = {}\n        self.response.write(\n           template.render('pages/merge_contacts.html', template_variables))\n\nclass Mobile(BaseHandler):\n    def task(self, isAdmin, s):\n\n        i_key = tools.getUserKey(self)\n        i = i_key.get()\n\n        template_variables = {\"i\" : i}\n        self.response.write(\n           template.render('pages/mobile.html', template_variables))\n\nclass NewContact(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        template_variables = {}\n        self.response.write(\n           template.render('pages/new_contact.html', template_variables))\n\nclass NewIndividual(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        template_variables = {\"teams\":s.data.all_teams}\n        self.response.write(\n                template.render('pages/new_individual.html', template_variables))\n\nclass NewTeam(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n        template_variables = {}\n        self.response.write(\n                template.render('pages/new_team.html', template_variables))\n\nclass MobileRedirectSetting(webapp2.RequestHandler):\n    def get(self):\n        session = get_current_session()\n        setting = self.request.get(\"r\")\n\n        session[\"no-redirect\"] = setting\n\n        self.redirect(\"/\")\n \nclass NotAuthorized(webapp2.RequestHandler):\n    def get(self):\n        template_variables = {}\n        self.response.write(\n           template.render('pages/not_authorized.html', template_variables))\n\nclass OfflineDonation(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n        i = tools.getUserKey(self).get()\n\n        template_variables = {\"teams\":None, \"individual_name\" : i.name, \n                \"individual_key\" : i.key.urlsafe(), \"teams\" : s.data.all_teams}\n\n        self.response.write(\n                template.render('pages/offline.html', template_variables))\n\nclass ReviewQueue(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        search_query = self.request.get(\"search\")\n\n        template_variables = {\"search_query\" : search_query}\n        self.response.write(\n            template.render('pages/review_queue.html', template_variables))\n\nclass ReviewQueueDetails(BaseHandler):\n    def task(self, isAdmin, s):\n        donation_key = self.request.get(\"id\")\n        if donation_key == \"\":\n        #If they didn't type any arguments into the address bar - meaning it didn't come from the app\n            tools.giveError(self, 500)\n        else:\n            #Getting donation by its key (from address bar argument)\n            d = tools.getKey(donation_key).get()\n\n            i_key = tools.getUserKey(self)\n            i = i_key.get()\n\n            donation_date = [d.donation_date.day, d.donation_date.month, d.donation_date.year]\n            donation_date = json.dumps(donation_date)\n\n            template_variables = {\"d\":d, \"s\":s, \"i\":i, \"donation_date\":donation_date}\n            self.response.write(\n                    template.render('pages/rq_details.html', template_variables))\n\nclass Settings(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        template_variables = {\"s\" : s}\n        self.response.write(\n           template.render('pages/settings.html', template_variables))\n\nclass SpreadsheetDownload(blobstore_handlers.BlobstoreDownloadHandler):\n    def get(self):\n        isAdmin, s = tools.checkAuthentication(self, True)\n\n        str_blob_key = self.request.get(\"blob_key\")\n        blob_key = blobstore.BlobInfo.get(str_blob_key)\n\n        if not blobstore.get(str_blob_key):\n            self.error(404)\n        else:\n            self.send_blob(blob_key, save_as=True)\n\nclass TeamMembers(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        team_key = self.request.get(\"t\")\n        t = tools.getKey(team_key).get()\n\n        template_variables = {\"t\":t}\n        self.response.write(\n           template.render('pages/team_members.html', template_variables))\n\nclass ThankYou(webapp2.RequestHandler):\n    def get(self):\n        try:\n            mode = self.request.get(\"m\")\n            donation_key = self.request.get(\"id\")\n\n            if mode == \"\" or donation_key == \"\":\n                #Throw an error if you don't have those two pieces of info\n                raise Exception(\"Don't know mode or donation key.\")\n\n            d = tools.getKey(donation_key).get()\n            date = tools.convertTime(d.donation_date).strftime(\"%B %d, %Y\")\n            s = d.settings.get()\n\n            if d.individual:\n                individual_name = d.individual.get().name\n            elif d.team:\n                individual_name = d.team.get().name\n            else:\n                individual_name = None\n\n            template_variables = {\"s\": s, \"d\" : d, \"c\" : d.contact, \"date\" : date, \"individual_name\" : individual_name}\n\n            if mode == \"w\":\n                template_location= \"pages/letters/thanks_live.html\"\n\n            elif mode == \"p\":\n                template_location= \"pages/letters/thanks_print.html\"\n\n            elif mode == \"e\":\n                who = \"http://ghidonations.appspot.com\"\n\n                template_variables[\"see_url\"] = d.confirmation.see_url(who)\n                template_variables[\"print_url\"] = d.confirmation.print_url(who)\n\n                template_location = \"pages/letters/thanks_email.html\"\n\n            self.response.write(\n                   template.render(template_location, template_variables))\n        \n        except:\n            #If there's a malformed URL, give a 500 error\n            self.error(500)\n            self.response.write(\n                   template.render('pages/letters/thankyou_error.html', {}))\n\nclass UndepositedDonations(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n\n        template_variables = {\"donations\" : s.data.undeposited_donations}\n        self.response.write(\n                template.render('pages/undeposited_donations.html', template_variables))\n\nclass UpdateProfile(blobstore_handlers.BlobstoreUploadHandler):\n    def post(self):\n        #Has a new image been selected?\n        change_image = True\n        try:\n            upload_files = self.get_uploads('new_photo')\n            blob_info = upload_files[0]\n        except:\n            change_image = False\n\n        individual_key = self.request.get(\"individual_key\")\n        name = self.request.get(\"name\")\n        email = self.request.get(\"email\")\n        team = self.request.get(\"team_list\")\n        description = quopri.decodestring(self.request.get(\"description\"))\n        password = self.request.get(\"password\")\n        show_donation_page = self.request.get(\"show_donation_page\")\n\n        if show_donation_page == \"on\":\n            show_donation_page = True\n        elif show_donation_page == \"\":\n            show_donation_page = False\n\n        i = tools.getKey(individual_key).get()\n\n        if change_image == True:\n            new_blobkey = str(blob_info.key())\n        else:\n            new_blobkey = None\n\n        logging.info(\"Saving profile for: \" + name)\n\n        i.update(name, email, team, description, new_blobkey, password, show_donation_page)\n\n        self.redirect(\"/#profile?i=\" + individual_key)\n\nclass IPN(BaseHandlerAdmin):\n    def task(self, isAdmin, s):\n        self.response.write(\"GHI Donations - PayPal IPN Handler\")\n\n    def post(self):\n        #Below URL used for the live version.\n        PP_URL = \"https://www.paypal.com/cgi-bin/webscr\"\n\n        #Below URL used for testing with the sandbox - if this is uncommented, all real\n        #donations will not be authenticated. ONLY use with dev versions.\n        # PP_URL = \"https://www.sandbox.paypal.com/cgi-bin/webscr\"\n\n        #Gets all account emails from Settings data models\n        #to authenticate PayPal (don't accept payment from unknown)\n        all_account_emails = tools.getAccountEmails(self)\n\n        parameters = None\n        if self.request.POST:\n            parameters = self.request.POST.copy()\n        if self.request.GET:\n            parameters = self.request.GET.copy()\n\n        payment_status = self.request.get(\"payment_status\")\n        logging.info(\"Payment status: \" + payment_status)\n\n        # Check payment is completed, not Pending or Failed.\n        if payment_status == \"Failed\" or payment_status == \"Pending\":\n           logging.error(\"Payment status is \" + payment_status + \", so not continuing.\")\n           \n        else:\n            logging.info(\"All parameters: \" + str(parameters))\n    \n            # Check the IPN POST request came from real PayPal, not from a fraudster.\n            if parameters:\n                parameters['cmd']='_notify-validate'\n                params = urllib.urlencode(parameters)\n                status = urlfetch.fetch(\n                            url = PP_URL,\n                            method = urlfetch.POST,\n                            payload = params,\n                           ).content\n                if not status == \"VERIFIED\":\n                    logging.debug(\"PayPal returned status:\" + str(status))\n                    logging.debug('Error. The request could not be verified, check for fraud.')\n                    parameters['homemadeParameterValidity']=False\n    \n            #Comparing receiver email to list of allowed email addresses\n            try:\n                receiver_email = parameters['receiver_email']\n                authenticated = False\n                settings = None\n            \n                #If the receiver_email isn't in the database, this will fail\n                settings = all_account_emails[receiver_email]\n                authenticated = True\n                logging.info(\"Getting payment to account: \" + receiver_email + \", #: \" + settings)\n    \n            except:\n                authenticated = False\n                logging.info(\"No match for incoming payment email address. Not continuing.\")\n    \n            # Make sure money is going to the correct account - otherwise fraudulent\n            if authenticated == True:\n                #Currency of the donation\n                #currency = parameters['mc_currency']\n    \n                s = tools.getKey(settings).get()\n                ipn_data = str(parameters)\n    \n                #Email and payer ID  numbers\n                try:\n                    email = parameters['payer_email']\n                except:\n                    email = None\n                \n                try:\n                    name = parameters['first_name'] + \" \" + parameters['last_name']\n                except:\n                    name = \"Anonymous Donor\"\n    \n                #Check if an address was given by the donor\n                try:\n                    #Stich all the address stuff together\n                    address = [parameters['address_street'], parameters['address_city'], parameters['address_state'], parameters['address_zip']]\n                    \n                except:\n                    address = None\n    \n                #Reading designation and notes values encoded in JSON from\n                #donate form\n                decoded_custom = None\n    \n                try:\n                    decoded_custom = json.loads(parameters[\"custom\"])\n    \n                    team_key = tools.getKey(decoded_custom[0])\n                    individual_key = tools.getKey(decoded_custom[1])\n                    special_notes = decoded_custom[2]\n    \n                    if s.exists.entity(team_key) == False:\n                        team_key = None\n                    if s.exists.entity(individual_key) == False:\n                        individual_key = None\n    \n                except:\n                    logging.info(\"Excepted on designation.\")\n                    team_key = None\n                    individual_key = None\n                    special_notes = None\n    \n                try:\n                    cover_trans = decoded_custom[3]\n                    email_subscr = decoded_custom[4]\n                except:\n                    cover_trans = False\n                    email_subscr = False\n    \n    \n                confirmation_amount = tools.toDecimal(0)\n                amount_donated = tools.toDecimal(0)\n                try:\n                    confirmation_amount = parameters['mc_gross']\n                    amount_donated = float(parameters['mc_gross']) - float(parameters['mc_fee'])\n    \n                except:\n                    pass\n                    \n                #Find out what kind of payment this was - recurring, one-time, etc.\n                try:\n                    payment_type = parameters['txn_type']\n                except:\n                    logging.info(\"Txn_type not available, so continuing with payment status\")\n                    payment_type = payment_status\n    \n                if payment_type == \"recurring_payment_profile_created\" or payment_type == \"subscr_signup\":\n                    logging.info(\"This is the start of a recurring payment. Create info object.\")\n    \n                    payment_id = parameters['subscr_id']\n    \n                    #Duration between payments\n                    duration = \"recurring\"\n    \n                    # s.create.recurring_donation(payment_id, duration, ipn_data)\n                    \n                elif payment_type == \"recurring_payment\" or payment_type == \"subscr_payment\":\n                    logging.info(\"This is a recurring donation payment.\")\n                    \n                    payment_id = parameters['subscr_id']\n                    payment_type = \"recurring\"\n                    \n                    #Create a new donation\n                    s.create.donation(name, email, amount_donated, confirmation_amount, address, team_key, individual_key, True, payment_id, special_notes, payment_type, email_subscr, ipn_data)\n    \n                elif payment_type == \"web_accept\":\n                    logging.info(\"This is a one-time donation.\")\n    \n                    if payment_status == \"Completed\":\n                        payment_id = parameters['txn_id']\n    \n                        #Create a new donation\n                        s.create.donation(name, email, amount_donated, confirmation_amount, address, team_key, individual_key, True, payment_id, special_notes, \"one-time\", email_subscr, ipn_data)\n    \n                    else:\n                        logging.info(\"Payment status not complete.  Not logging the donation.\")\n    \n                elif payment_type == \"subscr_cancel\":\n                    logging.info(\"A subscriber has cancelled.\")\n                    amount_donated = \"N/A\"\n                \n                elif payment_type == \"subscr_failed\":\n                    logging.info(\"A subscriber payment has failed.\")\n                    amount_donated = \"N/A\"\n    \n                elif payment_type == \"Refunded\":\n                    try:\n                        donation = models.Donation.gql(\"WHERE payment_id = :t\", t=parameters[\"txn_id\"])\n                        donation_key = donation[0].key()\n    \n                        donation_key.delete()\n                        logging.info(\"Refund detected and donation deleted. (\" + donation_key.urlsafe() + \")\")\n                    except:\n                        logging.info(\"Donation tried to be deleted, but failed. Most likely already deleted.\")\n                    \n                try:\n                    logging.info(\"Recording IPN\")\n                    logging.info(\"Payment type: \" + payment_type)\n                    logging.info(\"Name: \" + name)\n                    logging.info(\"Email: \" + email)\n                    logging.info(\"Amount donated: \" + str(amount_donated))\n                except:\n                    logging.error(\"Failed somewhere in the logs.\")\n            \napp = webapp2.WSGIApplication([\n       ('/ajax/allcontacts', AllContacts),\n       ('/ajax/alldeposits', AllDeposits),\n       ('/ajax/allindividuals', AllIndividuals),\n       ('/ajax/allteams', AllTeams),       \n       ('/ajax/contact', Contact),       \n       ('/', Container),      \n       ('/ajax/dashboard', Dashboard),       \n       ('/ajax/deposit', Deposit),       \n       ('/donate', DonatePage),\n       ('/reports/donor', DonorReport),\n       ('/ajax/donorreport', DonorReportSelect),\n       ('/ajax/exportdonations', ExportDonations),\n       ('/ajax/profile', IndividualProfile),\n       ('/login', Login),\n       ('/logout', Logout),\n       ('/ajax/mergecontacts', MergeContacts),\n       ('/m', Mobile),\n       ('/ajax/newcontact', NewContact),\n       ('/ajax/newindividual', NewIndividual),\n       ('/ajax/newteam', NewTeam),\n       ('/m/redirect', MobileRedirectSetting),\n       ('/ajax/notauthorized', NotAuthorized),\n       ('/ajax/offline', OfflineDonation),\n       ('/ajax/review', ReviewQueue),\n       ('/ajax/reviewdetails', ReviewQueueDetails),\n       ('/ajax/settings', Settings),\n       ('/ajax/spreadsheet/download', SpreadsheetDownload),\n       ('/ajax/teammembers', TeamMembers),\n       ('/thanks', ThankYou),\n       ('/ajax/undeposited', UndepositedDonations),\n       ('/ajax/profile/upload', UpdateProfile),\n       ('/ipn', IPN)],\n       debug=True)\n\napp = appengine_config.webapp_add_wsgi_middleware(app)\napp = appengine_config.recording_add_wsgi_middleware(app)\n"]],"start1":0,"start2":0,"length1":0,"length2":29168}]],"length":29168}
